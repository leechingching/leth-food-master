{"version":3,"sources":["styles/app.module.scss","components/Header/Header.js","hoc/Aux/Aux.js","components/Suggestion/Suggestion.js","components/Guide/Guide.js","components/Cuisines/Cuisines.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","HeaderWrapper","appTitle","appTitle__lethbridge","Cuisines","CuisinesSelect","select__container","CuisinesSelectOptions","Suggestion","Suggestion__mySuggestion","mySuggestion__name","mySuggestion__address","Header","react_default","a","createElement","className","styles","appTitle__food","appTitle__guide","aux","props","children","Aux","suggestion","address","Suggestion__button","onClick","suggested","disabled","isDisabled","style","cursor","Guide","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","names","list","updatedList","getSuggestion","event","preventDefault","rSuggestion","rAddress","newName","toConsumableArray","getList","Set","map","name","i","key","restaurant","randomR","Math","floor","random","length","location","setState","getRestaurantsHandler","console","log","value","getZomato","prevProps","prevState","_this2","config","headers","user-key","process","REACT_APP_WEATHER_API_KEY","axios","get","concat","then","res","data","restaurants","catch","error","components_Suggestion_Suggestion","Component","optionList","getValue","changed","getOption","newVal","objectSpread","target","cuisines","cuisineItems","item","cuisine","cuisine_id","toString","cuisine_name","onChange","components_Guide_Guide","updated","App","components_Header_Header","components_Cuisines_Cuisines","Boolean","window","hostname","match","defaults","baseURL","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64b4ebbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__3Pb8W\",\"HeaderWrapper\":\"app_HeaderWrapper__2tnUp\",\"appTitle\":\"app_appTitle__4-rZW\",\"appTitle__lethbridge\":\"app_appTitle__lethbridge__1soq7\",\"Cuisines\":\"app_Cuisines__2OBUr\",\"CuisinesSelect\":\"app_CuisinesSelect__3otRd\",\"select__container\":\"app_select__container__XBL0e\",\"CuisinesSelectOptions\":\"app_CuisinesSelectOptions__DrqLh\",\"Suggestion\":\"app_Suggestion__3pWlL\",\"Suggestion__mySuggestion\":\"app_Suggestion__mySuggestion__1shYP\",\"mySuggestion__name\":\"app_mySuggestion__name__Jn4df\",\"mySuggestion__address\":\"app_mySuggestion__address__14dms\"};","import React from 'react'\nimport styles from '../../styles/app.module.scss'\n\nconst Header = () => {\n    return (\n        <div className={styles.HeaderWrapper}>\n            <h1 className={styles.appTitle}>\n                <span className={styles.appTitle__lethbridge}>\n                Lethbridge\n                </span>\n                <br />\n                <span className={styles.appTitle__food}>\n                Food \n                </span>\n                <span className={styles.appTitle__guide}>\n                guide\n                </span>\n            </h1>\n        </div>\n    )\n}\n\nexport default Header;","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport styles from '../../styles/app.module.scss';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst Suggestion = (props) => {\n\n    const disabled = {\n        'cursor' : 'not-allowed'\n    }\n\n    return (\n        <Aux>\n            <div className={styles.Suggestion}>\n                <div className={styles.Suggestion__mySuggestion}>\n                   <h2 className={styles.mySuggestion__name}>{props.suggestion}</h2>\n                   <p className={styles.mySuggestion__address}>{props.address}</p>\n                </div>\n                <button className={styles.Suggestion__button} onClick={props.suggested} disabled={!props.isDisabled} style={!props.isDisabled ? disabled : null }>GO!</button>\n            </div>\n        </Aux>\n    )\n}\n\nexport default Suggestion;","import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport axios from 'axios';\n\nimport Suggestion from '../../components/Suggestion/Suggestion';\n\nclass Guide extends Component {\n    constructor(props) {\n        super(props)\n        console.log(this.props.value + ' in Guide')\n    }\n\n    state = {\n        names: [],\n        suggestion: null,\n        address: null,\n        suggested: false,\n        list: [],\n        updatedList: false\n    }\n    \n    // https://developers.zomato.com/api/v2.1/search?entity_id=2891&entity_type=city&cuisines=168&sort=rating\n\n    componentDidMount() {\n        this.getZomato()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        \n        if(prevProps.value !== this.props.value) {\n                this.getZomato()\n                this.setState({updatedList:true})\n                console.log('The state is updated in the Guide component')\n            \n        }\n    }\n\n    getZomato() {\n        const config = { headers: {'user-key': process.env.REACT_APP_WEATHER_API_KEY } };\n        // The dault search value \"American food\"\n        // If the user selected an option & submitted, we update the sortData value with the id\n        axios.get(`/search?entity_id=2891&entity_type=city&count=50&sort=rating$&cuisines=${this.props.value}` , config) \n            .then(res => {\n                this.setState({names: res.data.restaurants})\n                console.log(this.state.names)\n            })\n            .catch(error => {\n                this.setState({error: true})\n            })\n    }\n\n    // Get the Suggestion\n    getSuggestion = (event) => { \n        \n        event.preventDefault();\n\n        const newName = [...this.state.names]\n    \n        if(this.state.getList) {\n\n            const uniKeys = [...(new Set(newName.map((name, i) => {\n                return(\n                    <li key={i}>\n                        <span>Name: { name.restaurant.name }</span>\n                    </li>\n                )\n            })))]\n\n        \n            return uniKeys\n        }\n\n        let rSuggestion\n        let rAddress\n\n        if(this.state.names) {\n            let randomR = this.state.names[Math.floor(Math.random()*this.state.names.length)];\n            rSuggestion = randomR.restaurant.name\n            rAddress = randomR.restaurant.location.address\n            //console.log(randomR.restaurant.name)\n            this.setState({suggestion: rSuggestion, address: rAddress})\n        } \n    }\n\n\n    // Get the Json\n    getRestaurantsHandler = () => {\n        this.setState({getList: true})\n    }\n\n    render () {\n        \n        return (\n            <Aux>\n                <Suggestion suggested={ this.getSuggestion } suggestion={this.state.suggestion} address={this.state.address} isDisabled={this.state.updatedList}/>\n                {/* <RestaurantList getList={ this.getRestaurantsHandler } rList={ this.getRestaurantList() }/> */}\n            </Aux>\n        )\n    }\n}\n\nexport default Guide;\n\n\n// How about get the cusine list on DidMoutn\n// Then update the axios in a clicked function\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Guide from '../Guide/Guide';\nimport styles from '../../styles/app.module.scss';\nimport Select from 'react-select'\n\nclass Cuisines extends Component {\n  state = {\n    error: false,\n    optionList: [],\n    value: null,\n    getValue: false,\n    changed: false\n  }\n  componentDidMount() {\n        const config = { headers: {'user-key': process.env.REACT_APP_WEATHER_API_KEY } };\n    // The dault search value \"American food\"\n      // If the user selected an option & submitted, we update the sortData value with the id\n      axios.get(`https://developers.zomato.com/api/v2.1/cuisines?city_id=2891` , config) \n          .then(res => {\n              this.setState({optionList: res.data.cuisines})\n              //console.log(this.state.optionList)\n          })\n          .catch(error => {\n              this.setState({error: true})\n          })\n  }\n  \n    getOption = (event) => {\n        event.preventDefault();\n        let newVal = {...this.state.value}\n        newVal = event.target.value\n        this.setState({value: + newVal, changed: true})\n        console.log('current Value is: ' + newVal)\n        return newVal\n    }\n\n    // CallCuisineId = () => {\n    //   this.props.onCuisineClick(this.props.id); // Call with cuisine id\n    // };\n\n    render() {\n      // const onChanged = this.state.getValue\n        const CuisinesCopy = [...this.state.optionList]\n     // console.log(CuisinesCopy)\n        const cuisineItems = CuisinesCopy.map((item) => {\n        return(\n            <option key={item.cuisine.cuisine_id.toString()} value={ item.cuisine.cuisine_id } >{item.cuisine.cuisine_name}</option>\n        )\n      })\n\n      return (\n        <div className={styles.Cuisines}>\n            <div className={styles.CuisinesSelect}>\n                <div className={styles.select__container}>\n                    <select className={styles.CuisinesSelect} onChange={this.getOption}>\n                        <option className={styles.CuisinesSelectOptions} value=\"1\">Please select a cusion</option>\n                        { cuisineItems }\n                    </select>\n                </div>\n                <Guide getOption={this.getOption} updated={this.state.changed} value={this.state.value}/>\n            </div>\n        </div>\n\n        )\n    }\n  }\n  \n  export default Cuisines;\n  ","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport Cuisines from './components/Cuisines/Cuisines';\nimport styles from './styles/app.module.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={styles.container}>\n        <Header />\n        <Cuisines />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://developers.zomato.com/api/v2.1';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}